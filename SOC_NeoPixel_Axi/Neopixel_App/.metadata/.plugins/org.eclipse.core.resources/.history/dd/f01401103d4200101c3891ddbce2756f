/******************************************************************************
* Copyright (C) 2023 Advanced Micro Devices, Inc. All Rights Reserved.
* SPDX-License-Identifier: MIT
******************************************************************************/
/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

#include <stdio.h>
#include "platform.h"
#include "xil_printf.h"
#include "xscugic.h"
#include "SOC_NeoPixel_AXI_Core.h"
#include "sleep.h"

int SetupInterruptSystem(XScuGic *IntcInstancePtr, XGpio *GpioInstancePtr)
{
    int status;
    XScuGic_Config *gic_cfg;

    // Look up the GIC configuration
    gic_cfg = XScuGic_LookupConfig(XPAR_PS7_SCUGIC_0_DEVICE_ID);
    if (!gic_cfg) return XST_FAILURE;

    // Initialize the GIC driver
    status = XScuGic_CfgInitialize(IntcInstancePtr, gic_cfg, gic_cfg->CpuBaseAddress);
    if (status != XST_SUCCESS) return status;

    // Connect our ButtonISR to the GPIO interrupt ID
    status = XScuGic_Connect(IntcInstancePtr,
                             INTR_ID,
                             (Xil_ExceptionHandler)ButtonISR,
                             (void *)GpioInstancePtr);
    if (status != XST_SUCCESS) return status;

    // Enable the interrupt at the GIC
    XScuGic_Enable(IntcInstancePtr, INTR_ID);

    // Initialize the exception table and register the GIC handler
    Xil_ExceptionInit();
    Xil_ExceptionRegisterHandler(XIL_EXCEPTION_ID_INT,
                                 (Xil_ExceptionHandler)XScuGic_InterruptHandler,
                                 IntcInstancePtr);
    Xil_ExceptionEnable();

    // Initialize the GPIO driver
    status = XGpio_Initialize(GpioInstancePtr, GPIO_DEVICE_ID);
    if (status != XST_SUCCESS) return status;

    // Set channel directions: channel 1 = inputs, channel 2 = outputs
    XGpio_SetDataDirection(GpioInstancePtr, BTN_CHANNEL, 0xF);   // 4-bit input
    XGpio_SetDataDirection(GpioInstancePtr, LED_CHANNEL, 0x0);   // 4-bit output

    // Enable GPIO interrupts on channel 1 (buttons)
    XGpio_InterruptEnable(GpioInstancePtr, 1);
    XGpio_InterruptGlobalEnable(GpioInstancePtr);

    return XST_SUCCESS;
}

int main()
{
    init_platform();

    cleanup_platform();
    return 0;
}
