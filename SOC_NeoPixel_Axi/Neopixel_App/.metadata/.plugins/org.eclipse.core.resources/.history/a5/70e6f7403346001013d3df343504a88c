/******************************************************************************
* Copyright (C) 2023 Advanced Micro Devices, Inc. All Rights Reserved.
* SPDX-License-Identifier: MIT
******************************************************************************/
/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

#include <stdio.h>
#include "platform.h"
#include "xil_printf.h"
#include "xscugic.h"
#include "SOC_NeoPixel_AXI_Core.h"
#include "sleep.h"
#include "xgpio.h"
#include "xil_exception.h"
#include "neopixel_modes.h"

#define GPIO_DEVICE_ID	XPAR_AXI_GPIO_0_DEVICE_ID
#define INTR_ID			XPAR_FABRIC_AXI_GPIO_0_IP2INTC_IRPT_INTR

#define BTN_CHANNEL		1

static XGpio    Gpio;   // GPIO driver instance
static XScuGic  Intc;   // Interrupt controller instance
volatile uint32_t btn_flag = 0;

void ButtonISR(void *InstancePtr)
{
    // Clear the GPIO interrupt
    XGpio_InterruptClear(&Gpio, 1);

    // Read the 4-bit button state and stash it
    uint32_t btns = XGpio_DiscreteRead(&Gpio, BTN_CHANNEL);
    btn_flag = btns & 0xF;
}

int SetupInterruptSystem(XScuGic *IntcInstancePtr, XGpio *GpioInstancePtr)
{
    int status;
    XScuGic_Config *gic_cfg;

    // Look up the GIC configuration
    gic_cfg = XScuGic_LookupConfig(XPAR_PS7_SCUGIC_0_DEVICE_ID);
    if (!gic_cfg) return XST_FAILURE;

    // Initialize the GIC driver
    status = XScuGic_CfgInitialize(IntcInstancePtr, gic_cfg, gic_cfg->CpuBaseAddress);
    if (status != XST_SUCCESS) return status;

    // Connect our ButtonISR to the GPIO interrupt ID
    status = XScuGic_Connect(IntcInstancePtr,
                             INTR_ID,
                             (Xil_ExceptionHandler)ButtonISR,
                             (void *)GpioInstancePtr);
    if (status != XST_SUCCESS) return status;

    // Enable the interrupt at the GIC
    XScuGic_Enable(IntcInstancePtr, INTR_ID);

    // Initialize the exception table and register the GIC handler
    Xil_ExceptionInit();
    Xil_ExceptionRegisterHandler(XIL_EXCEPTION_ID_INT,
                                 (Xil_ExceptionHandler)XScuGic_InterruptHandler,
                                 IntcInstancePtr);
    Xil_ExceptionEnable();

    // Initialize the GPIO driver
    status = XGpio_Initialize(GpioInstancePtr, GPIO_DEVICE_ID);
    if (status != XST_SUCCESS) return status;

    XGpio_SetDataDirection(GpioInstancePtr, BTN_CHANNEL, 0xF);   // 4-bit input

    // Enable GPIO interrupts on channel 1 (buttons)
    XGpio_InterruptEnable(GpioInstancePtr, 1);
    XGpio_InterruptGlobalEnable(GpioInstancePtr);

    return XST_SUCCESS;
}


int main()
{
    init_platform();

    int status;
    // Hook up interrupts and GPIO
    status = SetupInterruptSystem(&Intc, &Gpio);
       if (status != XST_SUCCESS) {
           xil_printf("Interrupt setup failed %d\r\n", status);
           return XST_FAILURE;
       }
    xil_printf("Press 0–3 for Neopixel modes:\r\n");
    xil_printf("0=color cycle 1=run light 2=rainbow 3=border blink\r\n");

    while (1) {
        if (btn_flag) {
            current_mode = __builtin_ctz(btn_flag);
            btn_flag = 0;
            xil_printf("Switched to mode %d\r\n", current_mode);
        }
            switch (current_mode) {
                case 0: mode0_color_cycle();     break;
                case 1: mode1_running_light();   break;
                case 2: mode2_rainbow_cycle();   break;
                case 3: mode3_border_blink();    break;
                default: break;
            }
            usleep(100000);
        }

    cleanup_platform();
    return 0;
}
