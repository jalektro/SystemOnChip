/******************************************************************************
* Copyright (C) 2023 Advanced Micro Devices, Inc. All Rights Reserved.
* SPDX-License-Identifier: MIT
******************************************************************************/
/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

#include <stdio.h>
#include "platform.h"
#include "xil_printf.h"
#include "xbram.h"
#include "xparameters.h"
#include "xgpio.h"
#include "xgpiops.h"


XBram bram;
XBram_Config *bram_cfg;
XGpio gpio;

int main()
{
    init_platform();
    int status;

    bram_cfg = XBram_LookupConfig(XPAR_AXI_BRAM_CTRL_0_DEVICE_ID);
    status = XBram_CfgInitialize(&bram, bram_cfg, bram_cfg->CtrlBaseAddress);
    if (status != XST_SUCCESS) {
    	printf("BRAM initialisation failed!\n");
    			return -1;
    }


    status = XGpio_Initialize(&gpio, XPAR_AXI_GPIO_0_DEVICE_ID);
    if (status != XST_SUCCESS) {
    	printf("GPIO initialisation failed!\n");
    			return -1;
    }

    XGpio_SetDataDirection(&gpio, 1, 0x0);

    XBram_WriteReg(bram_cfg->MemBaseAddress, 0x00, 0x1);

    u32 val = XBram_ReadReg(bram_cfg->MemBaseAddress, 0x00);

    if( val == 0x1) {
    	XGpio_DiscreteWrite(&gpio, 1, 0x1); // LED ON
    } else {
    	  XGpio_DiscreteWrite(&gpio, 1, 0x0); // LED OFF
    }
     while(1);

    cleanup_platform();
    return 0;
}
